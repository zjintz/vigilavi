security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers

    encoders:
      App\Application\Sonata\UserBundle\Entity\User:
          algorithm: auto
          iterations: 12

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # -> custom firewall for the admin area of the URL
        admin:
            pattern:            /(.*)
            context:            user
            form_login:
                provider:       fos_userbundle
                login_path:     /login
                use_forward:    false
                check_path:     /login_check
                failure_path:   null
            logout:
                path:           /logout
                target:         /login
            anonymous:          true
            
        main:
            pattern:             .*
            context:             user
            form_login:
                provider:       fos_userbundle
                login_path:     /login
                use_forward:    false
                check_path:     /login_check
                failure_path:   null
            logout:             true
            anonymous:          true

    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
       # SONATA:
                #- ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT  # if you are using acl then this line must be commented


    providers:
        fos_userbundle:
            id: fos_user.user_provider.username

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
      # Admin login page needs to be accessed without credential
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY , requires_channel: '%env(SECURE_SCHEME)%'}
        - { path: ^/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY , requires_channel: '%env(SECURE_SCHEME)%'}
        - { path: ^/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY ,requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY , requires_channel: '%env(SECURE_SCHEME)%'}
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: '%env(SECURE_SCHEME)%'}
        - { path: ^/register/confirmed, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: '%env(SECURE_SCHEME)%'}

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }
        - { path: ^/.*, role: ROLE_USER }
